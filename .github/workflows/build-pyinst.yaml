name: Build with Nuitka in Docker

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  build-in-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest tag and bump version
        id: versioning
        run: |
          git fetch --tags
          OLD_TAG=$(git describe --tags --abbrev=0 || echo v0.0.0)

          BASE_VERSION=$(echo $OLD_TAG | sed 's/^v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          case "${{ github.event.inputs.bump }}" in
            patch)
              PATCH=$((PATCH + 1))
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
          esac

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"

          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists. Using existing version."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag "$NEW_VERSION"
            git push origin "$NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update CURRENT_VERSION in updater.py
        run: |
          VERSION=${{ env.NEW_VERSION }}
          sed -i "s/^CURRENT_VERSION = .*/CURRENT_VERSION = \"$VERSION\"/" updater.py

      - name: Build in Docker (Debian Bullseye)
        run: |
          docker run --rm -v ${{ github.workspace }}:/app -w /app python:3.12-bullseye bash -c "
            apt-get update &&
            apt-get install -y gcc g++ libffi-dev python3-dev patchelf make &&
            pip install --upgrade pip &&
            pip install -r requirements.txt &&
            make pyinstaller
          "

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: uw
          path: /build-pyinstaller/bin/uw

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          files: /build-pyinstaller/bin/uw
