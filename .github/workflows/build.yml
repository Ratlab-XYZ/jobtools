name: Manual Build and Release with Nuitka

on:
  workflow_dispatch:

permissions:
  contents: write  # Required to create tags and releases

jobs:
  build-release:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Nuitka and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          pip install -r requirements.txt

      - name: Get latest tag and bump version
        id: versioning
        run: |
          git fetch --tags
          OLD_TAG=$(git describe --tags --abbrev=0 || echo v0.0.0)

          BASE_VERSION=$(echo $OLD_TAG | sed 's/^v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"

          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists. Using existing version."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag "$NEW_VERSION"
            git push origin "$NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update CURRENT_VERSION in updater.py
        run: |
          VERSION=${{ env.NEW_VERSION }}
          sed -i "s/^CURRENT_VERSION = .*/CURRENT_VERSION = \"$VERSION\"/" updater.py

      - name: Compile with Nuitka
        run: |
          nuitka --standalone --onefile --output-dir=dist --output-filename=uw main.py

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          files: dist/uw
